<script type="text/javascript">
  function addQuestionnaireTableRow(questionnaire_type,round_no,questionnaire, assignment_questionnaire, questionnaire_options) {
    var questionnaire_table = jQuery('#assignment_questionnaire_table>tbody>tr');
    var row_id = 'questionnaire_table_' + questionnaire_type;
    var i = 0;
    var html;

    html += '<tr id="' + row_id + '">' +
    '<input name="assignment_form[assignment_questionnaire][][assignment_id]" type="hidden" value="';
    html += '<%= @assignment_form.assignment.id %>';
    html += '">';

    //Rubric name
    if (round_no == null) {
      html += '<td><label for="questionnaire_id">' + questionnaire.display_type + ':</label></td>';
    }
    else {
      html += '<td><label for="questionnaire_id">' + questionnaire.display_type + ' Round '+ round_no + ':</label></td>';
    }
    
    //Rubric options
    html += '<td>' +
    '<select id="questionnaire_id" name="assignment_form[assignment_questionnaire][][questionnaire_id]" style="width:300px" class="form-control">' +
    '<option value="">--None--</option>';
    
    for (i = 0; i < questionnaire_options.length; i++) {
      html += '<option value="' + questionnaire_options[i][1] + '">' + questionnaire_options[i][0] + '</option>';
    }
    html += '</select></td>';

    //Use dropdown instead
    html += '<td><input type="checkbox" name="dropdown" id="dropdown" value="true"></td>';
    
    //Scored question display type (Dropdown or Scale)
    html += '<td><select id="scored_question_display_type", name="assignment_form[assignment_questionnaire][][dropdown]" class="form-control">';
    if (assignment_questionnaire.dropdown == true) {
      html += '<option value=true selected="selected">Dropdown</option>';
      html += '<option value=false>Scale</option>';
    } else {
      html += '<option value=true>Dropdown</option>';
      html += '<option value=false selected="selected">Scale</option>';
    }
    html += '</select></td>';

    //Weight
    html += '<td><input name="assignment_form[assignment_questionnaire][][questionnaire_weight]" style="width:40px" type="text" value="' + assignment_questionnaire.questionnaire_weight + '">% </td>' +
    '<td><input name="assignment_form[assignment_questionnaire][][notification_limit]" style="width:40px" type="text" value="' + assignment_questionnaire.notification_limit + '">% </td>';

    //Notification Limit 
    if (round_no ==null) {
          html += '<td><input name="assignment_form[assignment_questionnaire][][used_in_round]" style="width:30px" type="hidden" value=" "' + '"> </td>';
    }
    else{
          html += '<td><input name="assignment_form[assignment_questionnaire][][used_in_round]" style="width:30px" type="hidden" value="' + round_no + '"> </td>';
    }

    //insert menu for adding & selecting tag prompts
    <%if @assignment_form.assignment.is_answer_tagging_allowed %>
      tag_dropdown_index = 0
      placeholder_id = 'tag_prompt_placeholder_' + questionnaire.id
      deleted_input_id = getIdPrefix(questionnaire.id) + '[deleted][]'
      html += "<tr id='" + row_id + "_add_tag_prompt'>"
      html += "<td>Add tag prompts</td>"
      html += "<td colspan='6'><div id='" + placeholder_id + "'></div>"
      html += "<button type='button' class='btn btn-default' onClick='addTagPromptDropdown(\"" + placeholder_id + "\", undefined, " + questionnaire.id + ", " + null + ", " + 0 + ", " + 0 +")'>+Tag prompt+</button>"
      html += "<button type='button' class='btn btn-default' onClick='removeLastTagPromptDropdown(\"" + placeholder_id + "\",\"" + deleted_input_id + "\")'>-Tag prompt-</button>"
      html += "</td></tr>"
    <% end %>

    questionnaire_table.last().after(html);
    jQuery('#questionnaire_id').val(questionnaire.id).attr('id', '');
  }
  // start used for tag prompt
  var tag_prompts = null
  var q_types = null

  function initTagPrompts(){
    <% @assignment_form.tag_prompt_deployments.each do |tag_dep| %>
      addTagPromptDropdown('tag_prompt_placeholder_' + <%= tag_dep.questionnaire_id %>, <%= tag_dep.id %>, <%= tag_dep.questionnaire_id %>, <%= tag_dep.tag_prompt_id %>, '<%= tag_dep.question_type.to_s %>', <%= tag_dep.answer_length_threshold %>)
    <% end %>
  };

  <% unless @assignment_form.tag_prompt_deployments == nil %>
    initTagPrompts();
  <%end%>
  // end tag prompt code

  function removeQuestionnaireTableRow(questionnaire_type) {
    var row_id = 'questionnaire_table_' + questionnaire_type;
    jQuery('#' + row_id).remove();
    <%if @assignment_form.assignment.is_answer_tagging_allowed %>
    jQuery('#' + row_id + '_add_tag_prompt').remove();
    <%end%>
  }

  //zhewei: varying rubric by round still not add 'BookmarkRatingQuestionnaire' yet.

  function addQuestionnaireTableRowWithArguments(item,round_no = null, round_no_partial = null){
    if (round_no == null){
      return addQuestionnaireTableRow(
        item,
        null,
        <%= questionnaire(@assignment_form.assignment, item, nil).to_json.html_safe %>,
        <%= assignment_questionnaire(@assignment_form.assignment, item, nil).to_json.html_safe %>,
        <%= questionnaire_options(@assignment_form.assignment, item ,nil).to_json.html_safe %>);
      }
    else{
      return addQuestionnaireTableRow(
        item,
        round_no,
        <%= questionnaire(@assignment_form.assignment, item,round_no_partial).to_json.html_safe %>,
        <%= assignment_questionnaire(@assignment_form.assignment, item,round_no_partial).to_json.html_safe %>,
        <%= questionnaire_options(@assignment_form.assignment, item,round_no_partial).to_json.html_safe %>);
      }
  }


  function handleCheckReviewVary(checkvalue) {
    var state = checkvalue.checked;
    var round_count = <%= @assignment_form.assignment.rounds_of_reviews%>;
    var questionnaire_types = ['ReviewQuestionnaire', 'MetareviewQuestionnaire','AuthorFeedbackQuestionnaire', 'TeammateReviewQuestionnaire']
    
    if (state == true && round_count >1){
      //Make it display by rounds
      questionnaire_types.forEach(function(item){
        removeQuestionnaireTableRow(item);
      });
        
      <% for i in 1..@assignment_form.assignment.rounds_of_reviews %>
        addQuestionnaireTableRowWithArguments('ReviewQuestionnaire',<%=i%>,i);
      <% end %>
    
      questionnaire_types.slice(1).forEach(function(item){
        addQuestionnaireTableRowWithArguments(item);
      });

      <%@avoidrepeatsign=1%>;
    }

    if (state == false && round_count>1){
      //Make it display as usual
      questionnaire_types.forEach(function(item){
        if(item==='ReviewQuestionnaire'){
          for (i=1;i<=round_count+1;i++) {
            removeQuestionnaireTableRow(item);
          }
        }
        else
            removeQuestionnaireTableRow(item);
        });
      
      questionnaire_types.forEach(function(item){
        addQuestionnaireTableRowWithArguments(item);
      });
    }
    initTagPrompts();
  }

</script>

<!--Add a review varies by round checkbox. -->
<input name="assignment_questionnaire[used_in_round]" type="hidden" value="false" />
<%= check_box_tag('assignment_questionnaire[used_in_round]', 'true', @reviewvarycheck,:onclick=>"handleCheckReviewVary(this)") %>
<%= label_tag('assignment_questionnaire[used_in_round]', 'Review rubric varies by round?') %>
<div>
<table class='exp table table-striped' id='assignment_questionnaire_table'>
  <tr class='heading'>
    <th width="10%"></th>
    <th width="30%">Questionnaire</th>
    <th>Use dropdown<br/>instead
      <img src="/assets/info.png" title="If instructor chooses 'Use dropdown instead', a simple dropdown will be used by students to do their reviews using a simple dropdown instead of a full rubric">
    </th>
    <th>Scored-question<br/>display style
      <img src="/assets/info.png" title="Should questions be displayed as scaled (radio buttons) or criterion (dropdown)?">
    </th>
    <th>Weight</th>
    <th>Notification Limit
      <img src="/assets/info.png" title="The instructor will receive an email if a new review differs by more than the indicated percentage from existing reviews on this assignment.">
    </th>
  </tr>

  <script>
      jQuery(document).ready(function () {
        <% if @reviewvarycheck%>
          <% for i in 1..@assignment_form.assignment.rounds_of_reviews %>
            addQuestionnaireTableRowWithArguments('ReviewQuestionnaire', <%=i%>,i);
          <% end %>
        <% else %>
          addQuestionnaireTableRowWithArguments('ReviewQuestionnaire');
        <% end %>
          var metareview_allowed_checkbox = jQuery('#metareviewAllowed');
          if (metareview_allowed_checkbox.is(':checked')) {
            addQuestionnaireTableRowWithArguments('MetareviewQuestionnaire');
          }
          addQuestionnaireTableRowWithArguments('AuthorFeedbackQuestionnaire');
          
          var team_assignment_checkbox = jQuery('#team_assignment');
          if (team_assignment_checkbox.is(':checked')) {
            addQuestionnaireTableRowWithArguments('TeammateReviewQuestionnaire');
          }
          
          var bookmark_checkbox = jQuery('#assignment_form_assignment_use_bookmark');
          if (bookmark_checkbox.is(':checked')) {
            addQuestionnaireTableRowWithArguments('BookmarkRatingQuestionnaire');
          }
      });
  </script>
</table>
</div>
